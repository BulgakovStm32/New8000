<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\NEW8000MBV2_SWv003_.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\NEW8000MBV2_SWv003_.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Nov 10 19:06:52 2020
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_ParsingCmdFP &rArr; RS485_FP_BuildAndTxEventPack &rArr; Log_GetEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[55]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from sys_st.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from dma_st.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from dma_st.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from sys_st.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">IdleTask</a> from scheduler.o(i.IdleTask) referenced from scheduler.o(i.Scheduler)
 <LI><a href="#[3c]">IdleTask</a> from scheduler.o(i.IdleTask) referenced from scheduler.o(i.Scheduler_Init)
 <LI><a href="#[3c]">IdleTask</a> from scheduler.o(i.IdleTask) referenced from scheduler.o(i.Scheduler_SetTask)
 <LI><a href="#[3c]">IdleTask</a> from scheduler.o(i.IdleTask) referenced from scheduler.o(i.Scheduler_SetTimerTask)
 <LI><a href="#[3c]">IdleTask</a> from scheduler.o(i.IdleTask) referenced from scheduler.o(i.Scheduler_TimerService)
 <LI><a href="#[6]">MemManage_Handler</a> from sys_st.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from sys_st.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">RS485_RxBufClrHead</a> from rs485.o(i.RS485_RxBufClrHead) referenced from rs485.o(i.RS485_Init)
 <LI><a href="#[39]">RS485_RxPacket</a> from rs485.o(i.RS485_RxPacket) referenced from rs485.o(i.RS485_Init)
 <LI><a href="#[3b]">RS485_TxBufComplete</a> from rs485.o(i.RS485_TxBufComplete) referenced from rs485.o(i.RS485_Init)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from rtc_st.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from spi_st.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from sys_st.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">Task_ConfigModeUnit</a> from main.o(i.Task_ConfigModeUnit) referenced from main.o(i.Task_GetKeyState)
 <LI><a href="#[3d]">Task_ControlModeUnit</a> from main.o(i.Task_ControlModeUnit) referenced from main.o(i.Task_GetKeyState)
 <LI><a href="#[42]">Task_Executors</a> from main.o(i.Task_Executors) referenced from main.o(i.Task_Executors)
 <LI><a href="#[42]">Task_Executors</a> from main.o(i.Task_Executors) referenced from main.o(i.main)
 <LI><a href="#[43]">Task_GetKeyState</a> from main.o(i.Task_GetKeyState) referenced from main.o(i.Task_GetKeyState)
 <LI><a href="#[43]">Task_GetKeyState</a> from main.o(i.Task_GetKeyState) referenced from main.o(i.main)
 <LI><a href="#[40]">Task_ParsingCmdFP</a> from main.o(i.Task_ParsingCmdFP) referenced from main.o(i.Task_PollingRS485)
 <LI><a href="#[41]">Task_ParsingCmdSB</a> from main.o(i.Task_ParsingCmdSB) referenced from main.o(i.Task_PollingRS485)
 <LI><a href="#[3f]">Task_PojLineControlModeUnit</a> from main.o(i.Task_PojLineControlModeUnit) referenced from main.o(i.Task_GetKeyState)
 <LI><a href="#[44]">Task_PollingRS485</a> from main.o(i.Task_PollingRS485) referenced from main.o(i.Task_PollingRS485)
 <LI><a href="#[44]">Task_PollingRS485</a> from main.o(i.Task_PollingRS485) referenced from main.o(i.main)
 <LI><a href="#[32]">USART1_IRQHandler</a> from uart_st.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from uart_st.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from sys_st.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[48]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[f4]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[100]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[105]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[106]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[107]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[108]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[109]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[49]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Log_SaveEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[56]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[50]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[115]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[52]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
</UL>

<P><STRONG><a name="[116]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[119]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[11b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>Adc_GetMeas</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, adc_st.o(i.Adc_GetMeas))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerAndCharge_Loop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_MeasLoop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetAvrMeas
</UL>

<P><STRONG><a name="[e5]"></a>Adc_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, adc_st.o(i.Adc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>AnalogSwitch_Activate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, analogswitch.o(i.AnalogSwitch_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>AnalogSwitch_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, analogswitch.o(i.AnalogSwitch_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>AnalogSwitch_Prior_Set</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, analogswitch.o(i.AnalogSwitch_Prior_Set))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[c0]"></a>Blink</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blink.o(i.Blink))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PollingRS485
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[be]"></a>Blink_Loop</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, blink.o(i.Blink_Loop))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_st.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ButtonFP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons.o(i.ButtonFP))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Update
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForMic_Update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForManual_Update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanelSaveData
</UL>

<P><STRONG><a name="[ca]"></a>ButtonForManual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons.o(i.ButtonForManual))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
</UL>

<P><STRONG><a name="[57]"></a>ButtonForManual_Update</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, buttons.o(i.ButtonForManual_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ButtonForManual_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFP
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>

<P><STRONG><a name="[c9]"></a>ButtonForMic</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons.o(i.ButtonForMic))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
</UL>

<P><STRONG><a name="[59]"></a>ButtonForMic_Update</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, buttons.o(i.ButtonForMic_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ButtonForMic_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFP
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>

<P><STRONG><a name="[e0]"></a>Button_ClrToggle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buttons.o(i.Button_ClrToggle))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Fault
</UL>

<P><STRONG><a name="[99]"></a>Button_IsToggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttons.o(i.Button_IsToggle))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Fault
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>

<P><STRONG><a name="[5a]"></a>Button_Update</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, buttons.o(i.Button_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Button_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFP
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetKeyState
</UL>

<P><STRONG><a name="[cc]"></a>Charger_Activate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerandcharge.o(i.Charger_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[c8]"></a>Charger_Deactivate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerandcharge.o(i.Charger_Deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[e3]"></a>Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config.o(i.Config))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Config_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, config.o(i.Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Config_Init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_WriteWord
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_Unlock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_Lock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_ErasePage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>Config_Save</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, config.o(i.Config_Save))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[62]"></a>Config_SaveLoop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, config.o(i.Config_SaveLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Config_SaveLoop
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_WriteWord
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_Unlock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_Lock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32Flash_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[63]"></a>DMA1Ch2InitForTX</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma_st.o(i.DMA1Ch2InitForTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1Ch2InitForTX
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[aa]"></a>DMA1Ch2StartTX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dma_st.o(i.DMA1Ch2StartTX))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_StartBufTx
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dma_st.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dma_st.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>EepM95128_Info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eepm95128.o(i.EepM95128_Info))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
</UL>

<P><STRONG><a name="[65]"></a>EepM95128_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eepm95128.o(i.EepM95128_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EepM95128_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
</UL>

<P><STRONG><a name="[67]"></a>EepM95128_ReadBuffer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, eepm95128.o(i.EepM95128_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EepM95128_ReadBuffer &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_SendInstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWorkRegFromEep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneEventFromEep
</UL>

<P><STRONG><a name="[6b]"></a>EepM95128_WriteBuffer</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, eepm95128.o(i.EepM95128_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkRegToEep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneEventToEep
</UL>

<P><STRONG><a name="[6c]"></a>EepM95128_WritePage</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, eepm95128.o(i.EepM95128_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_Info
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteEnable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteDisable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WaitStandbyState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_SendInstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteBuffer
</UL>

<P><STRONG><a name="[75]"></a>FacePanel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fp_facepanel.o(i.FacePanel))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PollingRS485
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetKeyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>

<P><STRONG><a name="[70]"></a>FacePanelSaveData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fp_facepanel.o(i.FacePanelSaveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FacePanelSaveData
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFP
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[8a]"></a>Faults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, faults.o(i.Faults))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Loop
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[71]"></a>Faults_Loop</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, faults.o(i.Faults_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Faults_Loop &rArr; SpeakerLine_GetDefStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_GetStat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetDefStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Flags
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanel
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[76]"></a>FireLine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pojline.o(i.FireLine))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>

<P><STRONG><a name="[79]"></a>FireLine_FSMLoop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pojline.o(i.FireLine_FSMLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FireLine_FSMLoop &rArr; FireLine_LogicFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_LogicFSM
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FaultFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[9e]"></a>FireLine_GetContext</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pojline.o(i.FireLine_GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FireLine_GetContext
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxFireLineContextPack
</UL>

<P><STRONG><a name="[e6]"></a>FireLine_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pojline.o(i.FireLine_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>FireLine_MeasLoop</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, pojline.o(i.FireLine_MeasLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FireLine_MeasLoop
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetMeas
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_Cal_u0421_u0403Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ee]"></a>FsmMessages_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsmmessage.o(i.FsmMessages_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>Get_Crc16</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, crc16.o(i.Get_Crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RxPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_SaveEvent
</UL>

<P><STRONG><a name="[7d]"></a>GlobSwTimer_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swtimers.o(i.GlobSwTimer_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_LogicFSM
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FaultFSM
</UL>

<P><STRONG><a name="[7c]"></a>GlobSwTimer_Start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, swtimers.o(i.GlobSwTimer_Start))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_LogicFSM
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FaultFSM
</UL>

<P><STRONG><a name="[7e]"></a>GlobSwTimer_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swtimers.o(i.GlobSwTimer_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_LogicFSM
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FaultFSM
</UL>

<P><STRONG><a name="[bf]"></a>Gpio_CheckLoop</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, gpio_st.o(i.Gpio_CheckLoop))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[95]"></a>Gpio_GetState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_st.o(i.Gpio_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_Control
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerAndCharge_Loop
</UL>

<P><STRONG><a name="[e4]"></a>Gpio_Init</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, gpio_st.o(i.Gpio_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_st.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IdleTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(i.IdleTask))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>
<BR>[Address Reference Count : 5]<UL><LI> scheduler.o(i.Scheduler)
<LI> scheduler.o(i.Scheduler_Init)
<LI> scheduler.o(i.Scheduler_SetTask)
<LI> scheduler.o(i.Scheduler_SetTimerTask)
<LI> scheduler.o(i.Scheduler_TimerService)
</UL>
<P><STRONG><a name="[d4]"></a>LedRs485Act</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, relay.o(i.LedRs485Act))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PollingRS485
</UL>

<P><STRONG><a name="[93]"></a>Log_Counts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logging.o(i.Log_Counts))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
</UL>

<P><STRONG><a name="[84]"></a>Log_GetEvent</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, logging.o(i.Log_GetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Log_GetEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneEventToEep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneEventFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxEventPack
</UL>

<P><STRONG><a name="[87]"></a>Log_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logging.o(i.Log_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Log_Init &rArr; ReadWorkRegFromEep &rArr; EepM95128_ReadBuffer &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWorkRegFromEep
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Log_Loop</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, logging.o(i.Log_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Log_Loop &rArr; Log_SaveEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_SaveEvent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[8c]"></a>Log_ResetCountUnreadEvents</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logging.o(i.Log_ResetCountUnreadEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Log_ResetCountUnreadEvents &rArr; WriteWorkRegToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkRegToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[8b]"></a>Log_SaveEvent</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, logging.o(i.Log_SaveEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Log_SaveEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Crc16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeUTC_Get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneEventToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Loop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_st.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>MotherBoard_BuildingPackForRS485</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, mb_motherboard.o(i.MotherBoard_BuildingPackForRS485))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotherBoard_BuildingPackForRS485 &rArr; TimeUTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_GetStat
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeUTC_Get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Counts
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_Param
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_BuildAndTxPack
</UL>

<P><STRONG><a name="[5d]"></a>MotherBoard_WorkReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mb_motherboard.o(i.MotherBoard_WorkReg))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_st.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PAmp_Control</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, amplifier.o(i.PAmp_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PAmp_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[73]"></a>PAmp_GetStat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amplifier.o(i.PAmp_GetStat))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
</UL>

<P><STRONG><a name="[e8]"></a>PAmp_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, amplifier.o(i.PAmp_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerandcharge.o(i.Power))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[ea]"></a>PowerAndCharge_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, powerandcharge.o(i.PowerAndCharge_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>PowerAndCharge_Loop</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, powerandcharge.o(i.PowerAndCharge_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerAndCharge_Loop
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetMeas
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_StateCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[98]"></a>PriorityGet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.PriorityGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PriorityGet &rArr; ButtonForMic_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_IsToggle
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForMic_Update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForManual_Update
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
</UL>

<P><STRONG><a name="[9a]"></a>RS485_FP_BuildAndTxEventPack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rs485.o(i.RS485_FP_BuildAndTxEventPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RS485_FP_BuildAndTxEventPack &rArr; Log_GetEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_StartBufTx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_GetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[9d]"></a>RS485_FP_BuildAndTxFireLineContextPack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rs485.o(i.RS485_FP_BuildAndTxFireLineContextPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_FP_BuildAndTxFireLineContextPack &rArr; RS485_PackCrcCalc &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_StartBufTx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_GetContext
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[74]"></a>RS485_Flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(i.RS485_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PollingRS485
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdSB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9f]"></a>RS485_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rs485.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_Init &rArr; Uart3_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1Ch2InitForTX
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>RS485_MB_BuildAndTxPack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rs485.o(i.RS485_MB_BuildAndTxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS485_MB_BuildAndTxPack &rArr; MotherBoard_BuildingPackForRS485 &rArr; TimeUTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_StartBufTx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_MasterLoop
</UL>

<P><STRONG><a name="[a3]"></a>RS485_MB_MasterLoop</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rs485.o(i.RS485_MB_MasterLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_MB_MasterLoop &rArr; RS485_SB_BuildAndTxPack &rArr; RS485_PackCrcCalc &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_BuildAndTxPack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_BuildAndTxPack
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_TimeOutInc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cf]"></a>RS485_RxBuf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(i.RS485_RxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdSB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[a5]"></a>RS485_SB_BuildAndTxPack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rs485.o(i.RS485_SB_BuildAndTxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS485_SB_BuildAndTxPack &rArr; RS485_PackCrcCalc &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_BuildingPackForRS485
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_StartBufTx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_MasterLoop
</UL>

<P><STRONG><a name="[a8]"></a>RS485_SB_ErrorConnect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rs485.o(i.RS485_SB_ErrorConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_SB_ErrorConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_ClrData
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_TimeOutInc
</UL>

<P><STRONG><a name="[9c]"></a>RS485_StartBufTx</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rs485.o(i.RS485_StartBufTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_StartBufTx
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1Ch2StartTX
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_BuildAndTxPack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_BuildAndTxPack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxFireLineContextPack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxEventPack
</UL>

<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtc_st.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>Relay_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, relay.o(i.Relay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>Relay_Off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, relay.o(i.Relay_Off))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerRelays
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[bb]"></a>Relay_On</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, relay.o(i.Relay_On))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerRelays
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
</UL>

<P><STRONG><a name="[ac]"></a>Relay_UpdateLoop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, relay.o(i.Relay_UpdateLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Relay_UpdateLoop &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[d5]"></a>RtcGetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc_st.o(i.RtcGetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeUTC_Get
</UL>

<P><STRONG><a name="[d8]"></a>RtcInit</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, rtc_st.o(i.RtcInit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
</UL>

<P><STRONG><a name="[d6]"></a>RtcSetCounter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc_st.o(i.RtcSetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeUTC_Set
</UL>

<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_st.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_st.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Scheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(i.Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>Scheduler_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, scheduler.o(i.Scheduler_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>Scheduler_SetTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, scheduler.o(i.Scheduler_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_TimerService
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PollingRS485
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetKeyState
</UL>

<P><STRONG><a name="[ce]"></a>Scheduler_SetTimerTask</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, scheduler.o(i.Scheduler_SetTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Scheduler_SetTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetKeyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[af]"></a>Scheduler_TimerService</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, scheduler.o(i.Scheduler_TimerService))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Scheduler_TimerService
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[78]"></a>SirenBoard</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
</UL>

<P><STRONG><a name="[a7]"></a>SirenBoard_BuildingPackForRS485</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard_BuildingPackForRS485))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_BuildAndTxPack
</UL>

<P><STRONG><a name="[a9]"></a>SirenBoard_ClrData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard_ClrData))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_ErrorConnect
</UL>

<P><STRONG><a name="[eb]"></a>SirenBoard_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>SirenBoard_SaveData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard_SaveData))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdSB
</UL>

<P><STRONG><a name="[c5]"></a>SirenBoard_Set</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, sb_sirenboard.o(i.SirenBoard_Set))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[92]"></a>SpeakerLine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, linecheck.o(i.SpeakerLine))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_SaveRef
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetSteadyStateLoop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSM
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_CalcLcStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetDefStatus
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[b4]"></a>SpeakerLine_FSMLoop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linecheck.o(i.SpeakerLine_FSMLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpeakerLine_FSMLoop &rArr; SpeakerLine_FSM &rArr; SpeakerRelays
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[77]"></a>SpeakerLine_GetDefStatus</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, linecheck.o(i.SpeakerLine_GetDefStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpeakerLine_GetDefStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
</UL>

<P><STRONG><a name="[e7]"></a>SpeakerLine_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, linecheck.o(i.SpeakerLine_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>SpeakerLine_MeasLoop</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, linecheck.o(i.SpeakerLine_MeasLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpeakerLine_MeasLoop &rArr; SpeakerLine_GetSteadyStateLoop
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_OptoReley
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetSteadyStateLoop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetAvrMeas
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[91]"></a>SpeakerLine_Param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linecheck.o(i.SpeakerLine_Param))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[ba]"></a>SpeakerLine_SaveRef</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, linecheck.o(i.SpeakerLine_SaveRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpeakerLine_SaveRef
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[66]"></a>Spi2_Init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, spi_st.o(i.Spi2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_Init
</UL>

<P><STRONG><a name="[69]"></a>Spi2_TxRxByte</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spi_st.o(i.Spi2_TxRxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi2_TxRxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_UpdateLoop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_ReadBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteEnable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteDisable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WaitStandbyState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_SendInstruction
</UL>

<P><STRONG><a name="[5f]"></a>Stm32Flash_ErasePage</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sys_st.o(i.Stm32Flash_ErasePage))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveLoop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
</UL>

<P><STRONG><a name="[61]"></a>Stm32Flash_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_st.o(i.Stm32Flash_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveLoop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
</UL>

<P><STRONG><a name="[5e]"></a>Stm32Flash_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_st.o(i.Stm32Flash_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveLoop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
</UL>

<P><STRONG><a name="[60]"></a>Stm32Flash_WriteWord</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sys_st.o(i.Stm32Flash_WriteWord))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveLoop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
</UL>

<P><STRONG><a name="[ed]"></a>SwTimers_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, swtimers.o(i.SwTimers_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>SwTimers_Loop</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, swtimers.o(i.SwTimers_Loop))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; RS485_MB_MasterLoop &rArr; RS485_SB_BuildAndTxPack &rArr; RS485_PackCrcCalc &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink_Loop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_CheckLoop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_TimerService
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Loop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Control
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_MasterLoop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerAndCharge_Loop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_MeasLoop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_MeasLoop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Flags
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimers_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>SysTick_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_tick_st.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>Sys_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sys_st.o(i.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCC
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>TIM1_Control</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers_st.o(i.TIM1_Control))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Control
</UL>

<P><STRONG><a name="[e2]"></a>TIM1_Init</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, timers_st.o(i.TIM1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Init
</UL>

<P><STRONG><a name="[3e]"></a>Task_ConfigModeUnit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.Task_ConfigModeUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_ConfigModeUnit &rArr; PAmp_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogSwitch_Prior_Set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_Control
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_Deactivate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Off
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task_GetKeyState)
</UL>
<P><STRONG><a name="[3d]"></a>Task_ControlModeUnit</STRONG> (Thumb, 646 bytes, Stack size 8 bytes, main.o(i.Task_ControlModeUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Task_ControlModeUnit &rArr; PriorityGet &rArr; ButtonForMic_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForMic
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonForManual
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogSwitch_Prior_Set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_Control
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_On
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Off
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_Set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriorityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task_GetKeyState)
</UL>
<P><STRONG><a name="[42]"></a>Task_Executors</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(i.Task_Executors))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Task_Executors &rArr; Log_Loop &rArr; Log_SaveEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTimerTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Fault
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_UpdateLoop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_Deactivate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_Activate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FSMLoop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Loop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_On
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Off
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSMLoop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_UpdateLoop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults_Loop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Faults
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveLoop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> main.o(i.Task_Executors)
</UL>
<P><STRONG><a name="[43]"></a>Task_GetKeyState</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.Task_GetKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_GetKeyState &rArr; Scheduler_SetTimerTask
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Update
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTimerTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> main.o(i.Task_GetKeyState)
</UL>
<P><STRONG><a name="[40]"></a>Task_ParsingCmdFP</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, main.o(i.Task_ParsingCmdFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task_ParsingCmdFP &rArr; RS485_FP_BuildAndTxEventPack &rArr; Log_GetEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Beep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeUTC_Set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RxBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxFireLineContextPack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxEventPack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_ResetCountUnreadEvents
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_SaveRef
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_Param
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Flags
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Save
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanelSaveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task_PollingRS485)
</UL>
<P><STRONG><a name="[41]"></a>Task_ParsingCmdSB</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.Task_ParsingCmdSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_ParsingCmdSB
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RxBuf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Flags
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_SaveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task_PollingRS485)
</UL>
<P><STRONG><a name="[3f]"></a>Task_PojLineControlModeUnit</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, main.o(i.Task_PojLineControlModeUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_PojLineControlModeUnit &rArr; PAmp_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogSwitch_Prior_Set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_Control
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_On
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Off
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task_GetKeyState)
</UL>
<P><STRONG><a name="[44]"></a>Task_PollingRS485</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.Task_PollingRS485))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_PollingRS485
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedRs485Act
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Flags
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FacePanel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.Task_PollingRS485)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8e]"></a>TimeUTC_Get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time.o(i.TimeUTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeUTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_BuildingPackForRS485
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_SaveEvent
</UL>

<P><STRONG><a name="[d2]"></a>TimeUTC_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.TimeUTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeUTC_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[d7]"></a>Time_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time.o(i.Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uart_st.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_ClrErrFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, uart_st.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_ClrErrFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Uart1_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart_st.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart1_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Init
</UL>

<P><STRONG><a name="[a1]"></a>Uart3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_st.o(i.Uart3_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[a0]"></a>Uart3_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart_st.o(i.Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart3_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_st.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>VoiceMessage_Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jq6500.o(i.VoiceMessage_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PojLineControlModeUnit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlModeUnit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ConfigModeUnit
</UL>

<P><STRONG><a name="[de]"></a>VoiceMessage_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jq6500.o(i.VoiceMessage_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VoiceMessage_Init &rArr; JQ6500_Reset &rArr; JQ6500_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ6500_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>VoiceMessage_UpdateLoop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, jq6500.o(i.VoiceMessage_UpdateLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VoiceMessage_UpdateLoop &rArr; JQ6500_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ6500_TxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[d0]"></a>Zummer_Beep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, zummer.o(i.Zummer_Beep))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ParsingCmdFP
</UL>

<P><STRONG><a name="[c1]"></a>Zummer_Control</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zummer.o(i.Zummer_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Zummer_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Loop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Fault
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cb]"></a>Zummer_Fault</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, zummer.o(i.Zummer_Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Zummer_Fault &rArr; Zummer_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_IsToggle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ClrToggle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Executors
</UL>

<P><STRONG><a name="[e1]"></a>Zummer_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, zummer.o(i.Zummer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Zummer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>Zummer_Loop</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, zummer.o(i.Zummer_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Zummer_Loop &rArr; Zummer_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; Log_SaveEvent &rArr; WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogSwitch_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogSwitch_Activate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAmp_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_SetTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zummer_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerAndCharge_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_SaveEvent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_Param
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotherBoard_WorkReg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SirenBoard_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimers_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmMessages_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma_st.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1Ch2InitForTX
</UL>

<P><STRONG><a name="[c4]"></a>Init_RCC</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, sys_st.o(i.Init_RCC))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_st.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_st.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[d9]"></a>Usart1_ClrErrFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_st.o(i.Usart1_ClrErrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>Usart3_ClrErrFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_st.o(i.Usart3_ClrErrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>EepM95128_SendInstruction</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, eepm95128.o(i.EepM95128_SendInstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_ReadBuffer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WaitStandbyState
</UL>

<P><STRONG><a name="[6a]"></a>EepM95128_WaitStandbyState</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eepm95128.o(i.EepM95128_WaitStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_SendInstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
</UL>

<P><STRONG><a name="[6d]"></a>EepM95128_WriteDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eepm95128.o(i.EepM95128_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EepM95128_WriteDisable &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
</UL>

<P><STRONG><a name="[6e]"></a>EepM95128_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eepm95128.o(i.EepM95128_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EepM95128_WriteEnable &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2_TxRxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WritePage
</UL>

<P><STRONG><a name="[82]"></a>JQ6500_Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jq6500.o(i.JQ6500_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JQ6500_Reset &rArr; JQ6500_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ6500_TxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_Init
</UL>

<P><STRONG><a name="[83]"></a>JQ6500_TxCmd</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, jq6500.o(i.JQ6500_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JQ6500_TxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceMessage_UpdateLoop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ6500_Reset
</UL>

<P><STRONG><a name="[b1]"></a>SpeakerLine_CalcLcStatus</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, linecheck.o(i.SpeakerLine_CalcLcStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SpeakerLine_CalcLcStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSM
</UL>

<P><STRONG><a name="[b2]"></a>SpeakerLine_FSM</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linecheck.o(i.SpeakerLine_FSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpeakerLine_FSM &rArr; SpeakerRelays
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerRelays
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_CalcLcStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSMLoop
</UL>

<P><STRONG><a name="[b5]"></a>SpeakerLine_GetAvrMeas</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, linecheck.o(i.SpeakerLine_GetAvrMeas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpeakerLine_GetAvrMeas
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetMeas
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_MeasLoop
</UL>

<P><STRONG><a name="[b6]"></a>SpeakerLine_GetSteadyStateLoop</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, linecheck.o(i.SpeakerLine_GetSteadyStateLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpeakerLine_GetSteadyStateLoop
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_Led
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_MeasLoop
</UL>

<P><STRONG><a name="[b7]"></a>SpeakerLine_Led</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, linecheck.o(i.SpeakerLine_Led))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_GetSteadyStateLoop
</UL>

<P><STRONG><a name="[b9]"></a>SpeakerLine_OptoReley</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, linecheck.o(i.SpeakerLine_OptoReley))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_MeasLoop
</UL>

<P><STRONG><a name="[b3]"></a>SpeakerRelays</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, linecheck.o(i.SpeakerRelays))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpeakerRelays
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_On
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeakerLine_FSM
</UL>

<P><STRONG><a name="[85]"></a>ReadOneEventFromEep</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, logging.o(i.ReadOneEventFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadOneEventFromEep &rArr; EepM95128_ReadBuffer &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_GetEvent
</UL>

<P><STRONG><a name="[88]"></a>ReadWorkRegFromEep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logging.o(i.ReadWorkRegFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadWorkRegFromEep &rArr; EepM95128_ReadBuffer &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
</UL>

<P><STRONG><a name="[86]"></a>WriteOneEventToEep</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, logging.o(i.WriteOneEventToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteOneEventToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_SaveEvent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_GetEvent
</UL>

<P><STRONG><a name="[8d]"></a>WriteWorkRegToEep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logging.o(i.WriteWorkRegToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteWorkRegToEep &rArr; EepM95128_WriteBuffer &rArr; EepM95128_WritePage &rArr; EepM95128_WaitStandbyState &rArr; EepM95128_SendInstruction &rArr; Spi2_TxRxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepM95128_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_ResetCountUnreadEvents
</UL>

<P><STRONG><a name="[81]"></a>FireLine_Cal_u0421_u0403Status</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pojline.o(i.FireLine_Cal_u0421_u0403Status))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_MeasLoop
</UL>

<P><STRONG><a name="[7b]"></a>FireLine_FaultFSM</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, pojline.o(i.FireLine_FaultFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FireLine_FaultFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FSMLoop
</UL>

<P><STRONG><a name="[7a]"></a>FireLine_LogicFSM</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pojline.o(i.FireLine_LogicFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FireLine_LogicFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobSwTimer_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FireLine_FSMLoop
</UL>

<P><STRONG><a name="[97]"></a>Bat_StateCalc</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, powerandcharge.o(i.Bat_StateCalc))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerAndCharge_Loop
</UL>

<P><STRONG><a name="[ad]"></a>Pause</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, relay.o(i.Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_UpdateLoop
</UL>

<P><STRONG><a name="[9b]"></a>RS485_PackCrcCalc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rs485.o(i.RS485_PackCrcCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_PackCrcCalc &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Crc16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_TxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_BuildAndTxPack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_BuildAndTxPack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxFireLineContextPack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_FP_BuildAndTxEventPack
</UL>

<P><STRONG><a name="[3a]"></a>RS485_RxBufClrHead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rs485.o(i.RS485_RxBufClrHead))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(i.RS485_Init)
</UL>
<P><STRONG><a name="[39]"></a>RS485_RxPacket</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, rs485.o(i.RS485_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_RxPacket &rArr; Get_Crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Crc16
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RxBufClrHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(i.RS485_Init)
</UL>
<P><STRONG><a name="[a4]"></a>RS485_TimeOutInc</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rs485.o(i.RS485_TimeOutInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_TimeOutInc &rArr; RS485_SB_ErrorConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SB_ErrorConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_MB_MasterLoop
</UL>

<P><STRONG><a name="[a6]"></a>RS485_TxBuf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(i.RS485_TxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_PackCrcCalc
</UL>

<P><STRONG><a name="[3b]"></a>RS485_TxBufComplete</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs485.o(i.RS485_TxBufComplete))
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(i.RS485_Init)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
